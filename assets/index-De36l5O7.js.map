{"version":3,"file":"index-De36l5O7.js","sources":["../../src/game/Board.ts","../../src/game/GameState.ts","../../src/game/InputHandler.ts","../../src/game/Piece.ts","../../src/game/Game.ts","../../src/game/Renderer.ts","../../src/main.ts"],"sourcesContent":["import { Piece } from './Piece';\n\ninterface Position {\n  row: number;\n  col: number;\n}\n\nexport class Board {\n  private readonly rows: number;\n  private readonly cols: number;\n  private readonly empty: number;\n  private grid: number[][];\n\n  constructor(rows: number, cols: number) {\n    this.rows = rows;\n    this.cols = cols;\n    this.empty = 0;\n    this.grid = Array.from({ length: rows }, () =>\n      Array(cols).fill(this.empty)\n    );\n  }\n\n  public isValidMove(shape: number[][], row: number, col: number): boolean {\n    for (let r = 0; r < shape.length; r++) {\n      for (let c = 0; c < shape[0].length; c++) {\n        if (shape[r][c]) {\n          const nr = row + r;\n          const nc = col + c;\n          if (\n            nr < 0 ||\n            nr >= this.rows ||\n            nc < 0 ||\n            nc >= this.cols ||\n            this.grid[nr][nc] !== this.empty\n          ) {\n            return false;\n          }\n        }\n      }\n    }\n    return true;\n  }\n\n  public mergePiece(piece: Piece, position: Position): void {\n    const shape = piece.getShape();\n    for (let r = 0; r < shape.length; r++) {\n      for (let c = 0; c < shape[0].length; c++) {\n        if (shape[r][c]) {\n          this.grid[position.row + r][position.col + c] = 1;\n        }\n      }\n    }\n  }\n\n  public clearLines(): number {\n    let cleared = 0;\n    for (let r = this.rows - 1; r >= 0; r--) {\n      if (this.grid[r].every((cell) => cell !== this.empty)) {\n        this.grid.splice(r, 1);\n        this.grid.unshift(Array(this.cols).fill(this.empty));\n        cleared++;\n        r++;\n      }\n    }\n    return cleared;\n  }\n\n  public reset(): void {\n    this.grid = Array.from({ length: this.rows }, () =>\n      Array(this.cols).fill(this.empty)\n    );\n  }\n\n  public getCell(row: number, col: number): number {\n    return this.grid[row][col];\n  }\n\n  public getGrid(): number[][] {\n    return this.grid;\n  }\n}\n","export class GameState {\n  private score: number;\n  private lines: number;\n  private level: number;\n  private gameOver: boolean;\n  private isPaused: boolean;\n\n  constructor() {\n    this.score = 0;\n    this.lines = 0;\n    this.level = 1;\n    this.gameOver = false;\n    this.isPaused = false;\n  }\n\n  public updateScore(clearedLines: number): void {\n    if (clearedLines > 0) {\n      this.score += clearedLines * 100;\n      this.lines += clearedLines;\n      this.level = 1 + Math.floor(this.lines / 10);\n    }\n  }\n\n  public reset(): void {\n    this.score = 0;\n    this.lines = 0;\n    this.level = 1;\n    this.gameOver = false;\n    this.isPaused = false;\n  }\n\n  public togglePause(): void {\n    this.isPaused = !this.isPaused;\n  }\n\n  public setGameOver(): void {\n    this.gameOver = true;\n  }\n\n  public getScore(): number {\n    return this.score;\n  }\n\n  public getLines(): number {\n    return this.lines;\n  }\n\n  public getLevel(): number {\n    return this.level;\n  }\n\n  public isGameOver(): boolean {\n    return this.gameOver;\n  }\n\n  public getIsPaused(): boolean {\n    return this.isPaused;\n  }\n}\n","import { Game } from './Game';\n\nexport class InputHandler {\n  private game: Game;\n  private touchStartX: number | null;\n  private touchStartY: number | null;\n  private lastTapTime: number;\n  private readonly SWIPE_THRESHOLD = 50;\n  private readonly DOUBLE_TAP_DELAY = 300;\n\n  constructor(game: Game) {\n    this.game = game;\n    this.touchStartX = null;\n    this.touchStartY = null;\n    this.lastTapTime = 0;\n    this.setupEventListeners();\n  }\n\n  private setupEventListeners(): void {\n    // Keyboard controls\n    document.addEventListener('keydown', (e: KeyboardEvent) => {\n      if (!this.game.getIsStarted()) {\n        this.game.start();\n        return;\n      }\n\n      switch (e.key) {\n        case 'r':\n        case 'R':\n          this.game.restart();\n          return;\n      }\n\n      if (this.game.getGameState().isGameOver()) return;\n\n      switch (e.key) {\n        case 'ArrowLeft':\n        case '7':\n          this.game.move(-1);\n          break;\n        case 'ArrowRight':\n        case '9':\n          this.game.move(1);\n          break;\n        case 'ArrowUp':\n        case '8':\n          this.game.rotatePiece();\n          break;\n        case 'ArrowDown':\n        case '4':\n          this.game.moveDown();\n          break;\n        case ' ':\n        case '5':\n          this.game.drop();\n          break;\n        case 'p':\n        case 'P':\n          this.game.togglePause();\n          break;\n      }\n    });\n\n    // Touch controls\n    document.addEventListener('touchstart', (e: TouchEvent) => {\n      if (!this.game.getIsStarted() || this.game.getGameState().isGameOver())\n        return;\n\n      this.touchStartX = e.touches[0].clientX;\n      this.touchStartY = e.touches[0].clientY;\n\n      const now = Date.now();\n      if (now - this.lastTapTime < this.DOUBLE_TAP_DELAY) {\n        // Double tap detected - drop piece\n        this.game.drop();\n        e.preventDefault();\n      }\n      this.lastTapTime = now;\n    });\n\n    document.addEventListener('touchend', (e: TouchEvent) => {\n      if (\n        !this.game.getIsStarted() ||\n        !this.touchStartX ||\n        !this.touchStartY ||\n        this.game.getGameState().isGameOver()\n      )\n        return;\n\n      const touchEndX = e.changedTouches[0].clientX;\n      const touchEndY = e.changedTouches[0].clientY;\n\n      const deltaX = touchEndX - this.touchStartX;\n      const deltaY = touchEndY - this.touchStartY;\n\n      // Determine if it's a swipe or a tap\n      if (\n        Math.abs(deltaX) < this.SWIPE_THRESHOLD &&\n        Math.abs(deltaY) < this.SWIPE_THRESHOLD\n      ) {\n        // Tap - rotate piece\n        this.game.rotatePiece();\n      } else {\n        // Handle swipes\n        if (Math.abs(deltaX) > Math.abs(deltaY)) {\n          // Horizontal swipe\n          if (deltaX > 0) {\n            this.game.move(1); // Right\n          } else {\n            this.game.move(-1); // Left\n          }\n        } else {\n          // Vertical swipe\n          if (deltaY > 0) {\n            this.game.drop(); // Down\n          }\n        }\n      }\n\n      this.touchStartX = null;\n      this.touchStartY = null;\n      e.preventDefault();\n    });\n\n    document.addEventListener('touchmove', (e: TouchEvent) => {\n      if (!this.game.getIsStarted() || this.game.getGameState().isGameOver())\n        return;\n      e.preventDefault();\n    });\n  }\n}\n","interface PieceShape {\n  shape: number[][];\n}\n\nexport class Piece {\n  private static readonly PIECES: PieceShape[] = [\n    // O\n    {\n      shape: [\n        [1, 1],\n        [1, 1],\n      ],\n    },\n    // I\n    {\n      shape: [[1, 1, 1, 1]],\n    },\n    // Z\n    {\n      shape: [\n        [1, 1, 0],\n        [0, 1, 1],\n      ],\n    },\n    // L\n    {\n      shape: [\n        [1, 0],\n        [1, 0],\n        [1, 1],\n      ],\n    },\n    // T\n    {\n      shape: [\n        [1, 1, 1],\n        [0, 1, 0],\n      ],\n    },\n  ];\n\n  private shape: number[][];\n\n  constructor(shape: number[][] | null = null) {\n    this.shape = shape\n      ? JSON.parse(JSON.stringify(shape))\n      : this.getRandomPiece().shape;\n  }\n\n  private getRandomPiece(): PieceShape {\n    const idx = Math.floor(Math.random() * Piece.PIECES.length);\n    return JSON.parse(JSON.stringify(Piece.PIECES[idx]));\n  }\n\n  public rotate(): void {\n    // Clockwise rotation\n    this.shape = this.shape[0].map((_, i) =>\n      this.shape.map((row) => row[i]).reverse()\n    );\n  }\n\n  public getWidth(): number {\n    return this.shape[0].length;\n  }\n\n  public getHeight(): number {\n    return this.shape.length;\n  }\n\n  public getShape(): number[][] {\n    return this.shape;\n  }\n}\n","import { Board } from './Board';\nimport { GameState } from './GameState';\nimport { InputHandler } from './InputHandler';\nimport { Piece } from './Piece';\nimport { Renderer } from './Renderer';\n\ninterface Position {\n  row: number;\n  col: number;\n}\n\nexport class Game {\n  private readonly ROWS: number;\n  private readonly COLS: number;\n  private readonly TICK_MS: number;\n\n  private board: Board;\n  private gameState: GameState;\n  private renderer: Renderer;\n  private inputHandler: InputHandler;\n\n  private current: Piece | null;\n  private next: Piece | null;\n  private position: Position | null;\n  private isStarted: boolean;\n  private tickInterval: number | null;\n\n  constructor(renderer: Renderer) {\n    this.ROWS = 25;\n    this.COLS = 10;\n    this.TICK_MS = 500;\n\n    this.board = new Board(this.ROWS, this.COLS);\n    this.gameState = new GameState();\n    this.renderer = renderer;\n    this.inputHandler = new InputHandler(this);\n\n    this.current = null;\n    this.next = null;\n    this.position = null;\n    this.isStarted = false;\n    this.tickInterval = null;\n  }\n\n  public start(): void {\n    if (!this.isStarted) {\n      const startScreen = document.getElementById('start-screen');\n      const tetrisContainer = document.getElementById('tetris-container');\n\n      if (startScreen && tetrisContainer) {\n        startScreen.style.display = 'none';\n        tetrisContainer.style.display = 'flex';\n      }\n\n      this.isStarted = true;\n      this.spawnPiece();\n      this.tickInterval = window.setInterval(() => this.tick(), this.TICK_MS);\n    }\n  }\n\n  private spawnPiece(): void {\n    this.current = this.next || new Piece();\n    this.next = new Piece();\n    this.position = {\n      row: 0,\n      col: Math.floor((this.COLS - this.current.getWidth()) / 2),\n    };\n\n    if (\n      !this.board.isValidMove(\n        this.current.getShape(),\n        this.position.row,\n        this.position.col\n      )\n    ) {\n      this.gameState.setGameOver();\n    }\n  }\n\n  private tick(): void {\n    if (this.gameState.isGameOver() || this.gameState.getIsPaused()) return;\n\n    if (\n      this.board.isValidMove(\n        this.current!.getShape(),\n        this.position!.row + 1,\n        this.position!.col\n      )\n    ) {\n      this.position!.row++;\n    } else {\n      this.board.mergePiece(this.current!, this.position!);\n\n      // Find lines that are about to be cleared\n      const linesToClear: number[] = [];\n      for (let r = this.ROWS - 1; r >= 0; r--) {\n        if (this.board.getGrid()[r].every((cell) => cell !== 0)) {\n          linesToClear.push(r);\n        }\n      }\n\n      if (linesToClear.length > 0) {\n        // Start the animation\n        this.renderer.setLinesToClear(linesToClear);\n        this.render();\n\n        // Wait for animation to complete before clearing\n        setTimeout(() => {\n          const clearedLines = this.board.clearLines();\n          this.gameState.updateScore(clearedLines);\n          this.renderer.setLinesToClear([]);\n          this.spawnPiece();\n          this.render();\n        }, 300);\n        return;\n      } else {\n        this.spawnPiece();\n      }\n    }\n    this.render();\n  }\n\n  public move(dx: number): void {\n    if (\n      this.board.isValidMove(\n        this.current!.getShape(),\n        this.position!.row,\n        this.position!.col + dx\n      )\n    ) {\n      this.position!.col += dx;\n      this.render();\n    }\n  }\n\n  public moveDown(): void {\n    if (\n      this.board.isValidMove(\n        this.current!.getShape(),\n        this.position!.row + 1,\n        this.position!.col\n      )\n    ) {\n      this.position!.row++;\n      this.render();\n    }\n  }\n\n  public drop(): void {\n    while (\n      this.board.isValidMove(\n        this.current!.getShape(),\n        this.position!.row + 1,\n        this.position!.col\n      )\n    ) {\n      this.position!.row++;\n    }\n    this.tick();\n  }\n\n  public rotatePiece(): void {\n    this.current!.rotate();\n    if (\n      !this.board.isValidMove(\n        this.current!.getShape(),\n        this.position!.row,\n        this.position!.col\n      )\n    ) {\n      // If rotation is invalid, rotate back\n      this.current!.rotate();\n      this.current!.rotate();\n      this.current!.rotate();\n    }\n    this.render();\n  }\n\n  public togglePause(): void {\n    this.gameState.togglePause();\n    this.render();\n  }\n\n  public restart(): void {\n    // Clear existing interval\n    if (this.tickInterval) {\n      window.clearInterval(this.tickInterval);\n    }\n\n    this.gameState.reset();\n    this.board.reset();\n    this.current = null;\n    this.next = null;\n    this.position = null;\n    this.spawnPiece();\n    // Start new interval\n    this.tickInterval = window.setInterval(() => this.tick(), this.TICK_MS);\n    this.render();\n  }\n\n  private render(): void {\n    this.renderer.render(\n      this.board,\n      this.current,\n      this.next!,\n      this.position!,\n      this.gameState\n    );\n  }\n\n  public getIsStarted(): boolean {\n    return this.isStarted;\n  }\n\n  public getGameState(): GameState {\n    return this.gameState;\n  }\n}\n","import { Board } from './Board';\nimport { Piece } from './Piece';\nimport { GameState } from './GameState';\n\ninterface Position {\n  row: number;\n  col: number;\n}\n\nexport class Renderer {\n  private readonly gameBoard: HTMLElement;\n  private readonly nextPiece: HTMLElement;\n  private readonly scoreboard: HTMLElement;\n  private readonly instructions: HTMLElement;\n  private linesToClear: Set<number>;\n\n  constructor(\n    gameBoard: HTMLElement,\n    nextPiece: HTMLElement,\n    scoreboard: HTMLElement,\n    instructions: HTMLElement\n  ) {\n    this.gameBoard = gameBoard;\n    this.nextPiece = nextPiece;\n    this.scoreboard = scoreboard;\n    this.instructions = instructions;\n    this.linesToClear = new Set();\n  }\n\n  public setLinesToClear(lines: number[]): void {\n    this.linesToClear = new Set(lines);\n  }\n\n  public render(\n    board: Board,\n    current: Piece | null,\n    next: Piece,\n    position: Position,\n    gameState: GameState\n  ): void {\n    this.renderBoard(board, current, position, gameState);\n    this.renderNext(next);\n    this.renderScore(gameState);\n    this.renderInstructions();\n  }\n\n  private renderBoard(\n    board: Board,\n    current: Piece | null,\n    position: Position,\n    gameState: GameState\n  ): void {\n    let out = '';\n\n    for (let r = 0; r < board.getGrid().length; r++) {\n      out += '<!';\n      for (let c = 0; c < board.getGrid()[0].length; c++) {\n        let filled = board.getCell(r, c) !== 0;\n        let isAnimating = this.linesToClear.has(r);\n\n        if (!gameState.isGameOver() && current) {\n          for (let pr = 0; pr < current.getShape().length; pr++) {\n            for (let pc = 0; pc < current.getShape()[0].length; pc++) {\n              if (\n                current.getShape()[pr][pc] &&\n                r === position.row + pr &&\n                c === position.col + pc\n              ) {\n                filled = true;\n              }\n            }\n          }\n        }\n\n        if (filled) {\n          if (isAnimating) {\n            const flashStates = ['█', '▓', '▒', '░'];\n            const flashIndex = Math.floor(Date.now() / 50) % flashStates.length;\n            out += `[${flashStates[flashIndex]}]`;\n          } else {\n            out += '[ ]';\n          }\n        } else {\n          out += ' . ';\n        }\n      }\n      out += '!>\\n';\n    }\n\n    out += '<!'.padEnd(board.getGrid()[0].length * 3 + 2, '=') + '!>\\n';\n\n    if (gameState.isGameOver()) {\n      out += '\\nGAME OVER!\\nPress R to play again';\n    } else if (gameState.getIsPaused()) {\n      out += '\\nPAUSED';\n    }\n\n    this.gameBoard.textContent = out;\n  }\n\n  private renderNext(piece: Piece): void {\n    let out = 'NEXT:\\n';\n    for (let r = 0; r < piece.getShape().length; r++) {\n      for (let c = 0; c < piece.getShape()[0].length; c++) {\n        out += piece.getShape()[r][c] ? '[ ]' : '   ';\n      }\n      out += '\\n';\n    }\n    this.nextPiece.textContent = out;\n  }\n\n  private renderScore(gameState: GameState): void {\n    this.scoreboard.textContent = `LINES CLEARED: ${gameState.getLines()}\\nLEVEL: ${gameState.getLevel()}\\nSCORE: ${gameState.getScore()}`;\n  }\n\n  private renderInstructions(): void {\n    this.instructions.textContent = `INSTRUCTIONS:\\n7/←: LEFT   9/→: RIGHT\\n8/↑: ROTATE\\n4/↓: SOFT DROP\\n5/SPACE: HARD DROP\\nP: PAUSE    R: RESTART`;\n  }\n}\n","import './style.css';\nimport { Game } from './game/Game';\nimport { Renderer } from './game/Renderer';\n\n// Initialize the renderer with DOM elements\nconst renderer = new Renderer(\n  document.getElementById('game-board') as HTMLElement,\n  document.getElementById('next-piece') as HTMLElement,\n  document.getElementById('scoreboard') as HTMLElement,\n  document.getElementById('instructions') as HTMLElement\n);\n\n// Create the game instance\nconst game = new Game(renderer);\n\n// Start the game when the page loads\nwindow.onload = (): void => {\n  const startScreen = document.getElementById('start-screen');\n  const tetrisContainer = document.getElementById('tetris-container');\n  let gameStarted = false;\n\n  if (startScreen && tetrisContainer) {\n    startScreen.style.display = 'flex';\n    tetrisContainer.style.display = 'none';\n\n    // Start game when clicking/tapping anywhere on the document\n    document.body.addEventListener('click', () => {\n      if (!gameStarted) {\n        gameStarted = true;\n        startScreen.style.display = 'none';\n        tetrisContainer.style.display = 'flex';\n        game.start();\n      }\n    });\n  }\n};\n"],"names":["Board","rows","cols","__publicField","shape","row","col","r","c","nr","nc","piece","position","cleared","cell","GameState","clearedLines","InputHandler","game","e","now","touchEndX","touchEndY","deltaX","deltaY","_Piece","idx","_","i","Piece","Game","renderer","startScreen","tetrisContainer","linesToClear","dx","Renderer","gameBoard","nextPiece","scoreboard","instructions","lines","board","current","next","gameState","out","filled","isAnimating","pr","pc","flashStates","flashIndex","gameStarted"],"mappings":"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"}